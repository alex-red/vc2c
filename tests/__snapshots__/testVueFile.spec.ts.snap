// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testVueFile compatible 1`] = `
"import {
  computed,
  reactive,
  toRefs,
  ref,
  provide,
  inject,
  onBeforeUnmount,
  onUnmounted,
  defineComponent
} from '@vue/composition-api'

const symbol = Symbol('baz')

/**
 * My basic tag
 */
export default defineComponent({
  model: {
    prop: 'checked',
    event: 'change'
  },
  props: {
    bar: null,
    qaq: null,
    cac: null,
    checked: { type: Boolean },
    /**
     * My foo
     */
    foo: { type: Boolean, default: false }
  },
  name: 'oao',
  setup(props, context) {
    /**
     * My count
     */
    const count = computed(() => {
      return /* TODO: Check this convert result, it can work well in 80% case.*/ context
        .root.$store.state.count
    })

    const { a } = (() => {
      const a = 'pa'

      return toRefs(
        reactive({
          a: a
        })
      )
    })()

    const anotherComponent = ref<HTMLElement>(null)

    provide('foa', 'foo')
    provide('bar', 'bar')

    const foai = inject<string>('foai')

    const bari = inject<string>('bar')

    const optional = inject<string>('optional', 'default')

    const bazi = inject<string>(symbol)

    /**
     * My msg
     */
    const msg = ref('Vetur means \\"Winter\\" in icelandic.') //foo

    onBeforeUnmount(() => {
      context.emit('Tearing down')
    })
    onUnmounted(() => {
      console.log('destroyed')
    })

    /**
     * My greeting
     */
    const hello = () => {
      console.log(msg.value)
    }

    // TODO: Please remove unused return variable
    return {
      count,
      a,
      anotherComponent,
      foai,
      bari,
      optional,
      bazi,
      msg,
      onBeforeUnmount,
      onUnmounted,
      hello
    }
  }
})
"
`;

exports[`testVueFile no compatible 1`] = `
"import {
  computed,
  reactive,
  toRefs,
  ref,
  provide,
  inject,
  onBeforeUnmount,
  onUnmounted
} from 'vue'

const symbol = Symbol('baz')

/**
 * My basic tag
 */
export default {
  model: {
    prop: 'checked',
    event: 'change'
  },
  props: {
    bar: null,
    qaq: null,
    cac: null,
    checked: { type: Boolean },
    /**
     * My foo
     */
    foo: { type: Boolean, default: false }
  },
  name: 'oao',
  setup(props, context) {
    /**
     * My count
     */
    const count = computed(() => {
      return /* TODO: Check this convert result, it can work well in 80% case.*/ context
        .root.$store.state.count
    })

    const { a } = (() => {
      const a = 'pa'

      return toRefs(
        reactive({
          a: a
        })
      )
    })()

    const anotherComponent = ref<HTMLElement>(null)

    provide('foa', 'foo')
    provide('bar', 'bar')

    const foai = inject<string>('foai')

    const bari = inject<string>('bar')

    const optional = inject<string>('optional', 'default')

    const bazi = inject<string>(symbol)

    /**
     * My msg
     */
    const msg = ref('Vetur means \\"Winter\\" in icelandic.') //foo

    onBeforeUnmount(() => {
      context.emit('Tearing down')
    })
    onUnmounted(() => {
      console.log('destroyed')
    })

    /**
     * My greeting
     */
    const hello = () => {
      console.log(msg.value)
    }

    // TODO: Please remove unused return variable
    return {
      count,
      a,
      anotherComponent,
      foai,
      bari,
      optional,
      bazi,
      msg,
      onBeforeUnmount,
      onUnmounted,
      hello
    }
  }
}
"
`;
